

drop table bookingpassenger;
drop table bookingflight;
drop table bookingdata;
drop table ticketdata;
drop table flightdata;
drop table planes;
drop table customer;
drop table passenger;


drop sequence flight_sequence;
drop sequence booking_sequence;
drop sequence customer_sequence;
drop sequence plane_sequence;
drop sequence passenger_sequence;



/* Flight data */
CREATE TABLE FlightData ( 
flightID VARCHAR(255) PRIMARY key UNIQUE, 
planeID varchar,
departureAirport VARCHAR(255), 
arrivalAirport VARCHAR(255), 
actualDepartureTime CHAR(5),
actualArrivalTime CHAR(5), 
dateOfDeparture DATE, 
dateOfArrival DATE,
sdiscount BOOLEAN,
ddiscount BOOLEAN,
price float8);

CREATE OR REPLACE FUNCTION add_prefix_to_flightID() 
RETURNS TRIGGER AS $$
DECLARE
  flight_num INTEGER;
BEGIN
  SELECT nextval('flight_sequence') INTO flight_num;
  NEW.flightID = CONCAT('FL', flight_num);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE SEQUENCE flight_sequence
INCREMENT BY 1
START WITH 1;


CREATE TRIGGER add_prefix_trigger
BEFORE INSERT ON FlightData
FOR EACH ROW
EXECUTE FUNCTION add_prefix_to_flightID();






/* Customer data */
CREATE TABLE Customer(
customerID varchar(255) PRIMARY KEY unique,
customerName varchar(255),
customerLname varchar(255),
customerIdNumber varchar(255)
);

CREATE OR REPLACE FUNCTION add_prefix_to_customerID() 
RETURNS TRIGGER AS $$
DECLARE
  customer_num INTEGER;
BEGIN
  SELECT nextval('customer_sequence') INTO customer_num;
  NEW.customerID = CONCAT('C', customer_num);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE SEQUENCE customer_sequence
INCREMENT BY 1
START WITH 1;


CREATE TRIGGER add_prefix_trigger
BEFORE INSERT ON Customer
FOR EACH ROW
EXECUTE FUNCTION add_prefix_to_customerID();







/* Booking data*/
CREATE TABLE BookingData ( 
bookingID VARCHAR(255) PRIMARY key UNIQUE, 
customerID Varchar(255),
bookingDate Date,
foreign key (customerID) references Customer(customerID)
);

CREATE OR REPLACE FUNCTION add_prefix_to_bookingID() 
RETURNS TRIGGER AS $$
DECLARE
  booking_num INTEGER;
BEGIN
  SELECT nextval('booking_sequence') INTO booking_num;
  NEW.bookingID = CONCAT('B', booking_num);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE SEQUENCE booking_sequence
INCREMENT BY 1
START WITH 1;


CREATE TRIGGER add_prefix_trigger
BEFORE INSERT ON BookingData
FOR EACH ROW
EXECUTE FUNCTION add_prefix_to_bookingID();





/* Passenger data*/
CREATE TABLE Passenger(
passengerID varchar primary key unique,
passengerFname varchar(255),
passengerLname varchar(255),
passengerIdNr varchar,
passengerBD date
);
CREATE OR REPLACE FUNCTION add_prefix_to_passengerID() 
RETURNS TRIGGER AS $$
DECLARE
  passenger_num INTEGER;
BEGIN
  SELECT nextval('passenger_sequence') INTO passenger_num;
  NEW.passengerID = CONCAT('PS', passenger_num);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE SEQUENCE passenger_sequence
INCREMENT BY 1
START WITH 1;


CREATE TRIGGER add_prefix_trigger
BEFORE INSERT ON Passenger
FOR EACH ROW
EXECUTE FUNCTION add_prefix_to_passengerID();




/*Extra booking tables*/
CREATE TABLE BookingFlight (
  flightID VARCHAR(255),
  bookingID VARCHAR(255),
  FOREIGN KEY (flightID) REFERENCES flightdata(flightID),
  FOREIGN KEY (bookingID) REFERENCES bookingdata(bookingID)
);
CREATE TABLE BookingPassenger (
  passengerID VARCHAR(255),
  bookingID VARCHAR(255),
  FOREIGN KEY (passengerID) REFERENCES passenger(passengerID),
  FOREIGN KEY (bookingID) REFERENCES bookingdata(bookingID)
);







/* Ticket data */
create table TicketData(
ticketID int primary key generated by default as identity unique,
customerFirstName varchar(20),
customerLastName varchar(20),
customerBirthdate date,
seats varchar(4),
options varchar(20),
ticketType varchar(20),
maxLusggageWeight int,
flightId VARCHAR (255),
FOREIGN KEY(flightId) REFERENCES FlightData(flightID)
);



/*Plane data */
create table Planes(
planeID varchar primary key unique,
planeType varchar(20),
seats int
);

CREATE OR REPLACE FUNCTION add_prefix_to_planeID() 
RETURNS TRIGGER AS $$
DECLARE
  plane_num INTEGER;
BEGIN
  SELECT nextval('plane_sequence') INTO plane_num;
  NEW.planeid = CONCAT('PL', plane_num);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE SEQUENCE plane_sequence
INCREMENT BY 1
START WITH 1;


CREATE TRIGGER add_prefix_trigger
BEFORE INSERT ON Planes
FOR EACH ROW
EXECUTE FUNCTION add_prefix_to_planeID();


/*Insert data in Planes table */

insert into Planes values ('', 'Boeing 737', 250);

insert into Planes values ('', 'Boeing 777', 312);


